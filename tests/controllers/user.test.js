const request = require('supertest');
const app = require('../../app');
const User = require('../../models/userModels');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
require('dotenv').config();

describe('Testes das Rotas de Usu√°rio', () => {
    let userId;
    let token;

    // Limpa o banco e cria usu√°rio antes de cada teste
    beforeEach(async () => {
        await User.deleteMany({});

        const hashedPassword = await bcrypt.hash('password123', 10);
        const user = await User.create({
            name: 'John Doe',
            email: 'john@example.com',
            password: hashedPassword
        });
        userId = user._id.toString();;
        token = jwt.sign({ userId: userId }, process.env.JWT_SECRET, { expiresIn: '1h' });
        
    });
  
    // =============================
    // üßæ Cadastro de Usu√°rio
    // =============================
    describe('Cadastro de Usu√°rio', () => {
        it('Deve criar um novo usu√°rio com dados v√°lidos', async () => {
            const response = await request(app)
                .post('/api/users')
                .send({
                    name: 'Jane',
                    email: 'jane@example.com',
                    password: 'password321'
                });

            expect(response.status).toBe(201);
        });

        it('Deve retornar erro 400 ao tentar criar usu√°rio com dados inv√°lidos', async () => {
            const response = await request(app)
                .post('/api/users')
                .send({
                    name: '',
                    email: 'invalid-email',
                    password: 'short'
                });

            expect(response.status).toBe(400);
            expect(response.body.error).toBeDefined();
        });

        it('Deve retornar erro 400 ao tentar criar usu√°rio com email duplicado', async () => {
            const response = await request(app)
                .post('/api/users')
                .send({
                    name: 'John Doe',
                    email: 'john@example.com',
                    password: 'password123'
                });

            expect(response.status).toBe(400);
            expect(response.body.error).toBe('Email j√° registrado.');
        });
    });
  
    // =============================
    // üîê Autentica√ß√£o (JWT)
    // =============================
    describe('Autentica√ß√£o (JWT)', () => {
        it('Deve impedir atualiza√ß√£o sem token', async () => {
            const response = await request(app)
                .put(`/api/users/${userId}`)
                .send({ name: 'John Updated' });

            expect(response.status).toBe(401);
            expect(response.body.error).toBe('authMiddleware: Acesso negado. Token n√£o fornecido.');
        });

        it('Deve impedir exclus√£o sem token', async () => {
            const response = await request(app)
                .delete(`/api/users/${userId}`);

            expect(response.status).toBe(401);
            expect(response.body.error).toBe('authMiddleware: Acesso negado. Token n√£o fornecido.');
        });
    });

    // =============================
    // üìù Atualiza√ß√£o de Usu√°rio
    // =============================
    describe('Atualiza√ß√£o de Usu√°rio', () => {
        it('Deve atualizar um usu√°rio por ID com autentica√ß√£o', async () => {


           const res = await request(app).get(`/api/users/${userId}`)
                

            const response = await request(app)
                .put(`/api/users/${userId}`)
                .set('Authorization', `Bearer ${token}`)
                .send({ name: 'John Updated' });

            

            expect(response.status).toBe(200);
            expect(response.body.name).toBe('John Updated');
        });

        it('Deve atualizar a senha de um usu√°rio com autentica√ß√£o', async () => {
            const newPassword = 'newPassword456';
            const response = await request(app)
                .put(`/api/users/${userId}`)
                .set('Authorization', `Bearer ${token}`)
                .send({ password: newPassword });
          
            expect(response.status).toBe(200);

            const updatedUser = await User.findById(userId);
            const isPasswordValid = await bcrypt.compare(newPassword, updatedUser.password);
            expect(isPasswordValid).toBe(true);
        });

        it('Deve retornar erro 400 ao tentar atualizar com dados inv√°lidos', async () => {
            const response = await request(app)
                .put(`/api/users/${userId}`)
                .set('Authorization', `Bearer ${token}`)
                .send({ name: '' });

            expect(response.status).toBe(400);
            expect(response.body.error).toBeDefined();
        });
    });
    
    // =============================
    // üóëÔ∏è Exclus√£o de Usu√°rio
    // =============================
    describe('Exclus√£o de Usu√°rio', () => {
        it('Deve excluir um usu√°rio por ID com autentica√ß√£o', async () => {
            const response = await request(app)
                .delete(`/api/users/${userId}`)
                .set('Authorization', `Bearer ${token}`);

            expect(response.status).toBe(200);
            expect(response.body.message).toBe('Usu√°rio exclu√≠do com sucesso.');

            const deletedUser = await User.findById(userId);
            expect(deletedUser).toBeNull();
        });

        it('Deve retornar erro 404 ao tentar excluir um usu√°rio inexistente', async () => {
            const invalidUserId = '64b8f5c5e5d8b5f8e5d8b5f8';
            const response = await request(app)
                .delete(`/api/users/${invalidUserId}`)
                .set('Authorization', `Bearer ${token}`);

            expect(response.status).toBe(404);
            expect(response.body.error).toBe('Usu√°rio n√£o encontrado.');
        });
    });
});